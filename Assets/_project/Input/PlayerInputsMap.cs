//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.2
//     from Assets/_project/Input/PlayerInputsMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/_project/Input/PlayerInputsMap.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @PlayerInputsMap: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @PlayerInputsMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""version"": 1,
    ""name"": ""PlayerInputsMap"",
    ""maps"": [
        {
            ""name"": ""MenuMap"",
            ""id"": ""bf274b30-c4f9-4478-bf95-fbaabf08e3e7"",
            ""actions"": [
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""4f0bcf45-dedd-4d1c-91c7-b9c6bfc2818c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""1ba19030-8d4d-489c-9fde-4cc10adee64a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""ba3ebcf2-96ee-4e80-b6c8-6340e49e013c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""cad42fad-eb74-4c42-be97-5fc1ecf2c1be"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""ee829d9c-05f9-440c-b7fd-db69d4e1ea01"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Return"",
                    ""type"": ""Button"",
                    ""id"": ""0f2613d3-f5a5-4ee2-b7e2-6acac12403e2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""21745bd4-2581-46b8-b392-4475df29e227"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e0e7a50-130a-403b-ab17-852343e732c8"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc36b3c8-4307-4620-ae20-e7fd13c58308"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4dcd1cd-0ff4-4422-9c30-6cab53ca8e54"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f86f40f9-a481-46c6-9d3b-43fc7f69704f"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""486bb4cb-1f77-4780-8dbc-3d463aba2dd2"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15513c24-bcf7-45a7-a46c-baf4303352db"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b97cf6a-90fc-4bf0-9b07-40092029dfa2"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c621ac7-02e8-4be2-b3a3-b2925ef2d4b7"",
                    ""path"": ""<HID::DragonRise Inc.   Generic   USB  Joystick  >/button3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5180a98e-9171-4811-8f5e-db49eabdb7cb"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Return"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InGameMap"",
            ""id"": ""b9236c2b-813b-424a-b0e0-b8ca8e0ab829"",
            ""actions"": [
                {
                    ""name"": ""Coat"",
                    ""type"": ""Button"",
                    ""id"": ""16d9ae27-f2ba-4c03-8390-b9f184b9d37c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Coat1"",
                    ""type"": ""Button"",
                    ""id"": ""502410b8-8c34-477d-af15-733cc81d7b40"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hat"",
                    ""type"": ""Button"",
                    ""id"": ""91c393fd-fdb6-4b49-90bf-f6523b3f55ed"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hat1"",
                    ""type"": ""Button"",
                    ""id"": ""76c8728f-b754-4150-8f01-ca672330b906"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""555b59e3-494a-4997-a9cc-80af5275bcb4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoe"",
                    ""type"": ""Button"",
                    ""id"": ""7db7afa7-ab62-40f2-b10f-242c44e7bb5d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoe1"",
                    ""type"": ""Button"",
                    ""id"": ""cf611316-3088-4e73-b5b4-d1a5b4a0f837"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scan_Coat_BlackRed"",
                    ""type"": ""Button"",
                    ""id"": ""5feaa61b-167d-4c59-a3f4-f5bae237b34b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scan_Coat_Black"",
                    ""type"": ""Button"",
                    ""id"": ""410ef053-c236-4351-b46e-39d88d7c6fb1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scan_Coat_Yellow"",
                    ""type"": ""Button"",
                    ""id"": ""b98a7bb4-9466-4acc-8926-5fcc688b0f51"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scan_Hat_Blue"",
                    ""type"": ""Button"",
                    ""id"": ""15469011-8006-4433-b7db-61e2d99976b7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scan_Hat_Red"",
                    ""type"": ""Button"",
                    ""id"": ""87e6bd22-535b-4963-95c5-b3fc75e193ea"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scan_Shoe_BrownShoes"",
                    ""type"": ""Button"",
                    ""id"": ""5226b33c-9170-4cbf-b210-121af8696adc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scan_Shoe_BrownTalon"",
                    ""type"": ""Button"",
                    ""id"": ""145a0fdb-5a80-4382-8f3e-a439440c2805"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Bell"",
                    ""type"": ""Button"",
                    ""id"": ""e1b6d5c8-8229-4d16-8047-7d396b2b09bc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Bell1"",
                    ""type"": ""Button"",
                    ""id"": ""2432cca2-870f-4937-b3ea-98b50d0418ac"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""19139d2f-6e23-43d0-8b4b-6757307395cc"",
                    ""path"": ""<Joystick>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Coat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70d709b4-0117-4cfd-a181-ef84e9aaec84"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Coat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4ed9a12-ee50-422c-a1f4-da24562dd9e3"",
                    ""path"": ""<HID::DragonRise Inc.   Generic   USB  Joystick  >/button2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Coat1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b41d20b3-60b6-4988-b25d-16419b809fd8"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Coat1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d28c6759-9137-49c8-8d5e-bfa0e4360c56"",
                    ""path"": ""<HID::DragonRise Inc.   Generic   USB  Joystick  >/button8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dad0ab34-39e6-45df-b3e3-681f57e0c38b"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6901fdde-a272-46a9-8168-9d69be71954f"",
                    ""path"": ""<HID::DragonRise Inc.   Generic   USB  Joystick  >/button9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hat1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa7b3794-7e99-4bf6-a9ff-fff20db0e469"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hat1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b6f1230-5562-4231-b2b6-2310d10bf131"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51b23237-d7ae-44c6-adf5-f834b4f5d108"",
                    ""path"": ""<HID::DragonRise Inc.   Generic   USB  Joystick  >/button3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e2bb44b-cd29-461c-9d88-4f28dd425f27"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoe1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa22dcce-e658-4f82-ae6c-679488140b2a"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scan_Coat_BlackRed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f931504-bb40-41dd-8873-c68be9811ab8"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scan_Coat_Black"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d016213e-2aa6-4fcc-b762-23ece018640c"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scan_Coat_Yellow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd0cc6d4-cf99-442a-88d4-6b7d6898918a"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scan_Hat_Blue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df5de530-8628-40bf-8454-5c7b0c41423e"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scan_Hat_Red"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69d0ac08-30f9-4ac6-b2f0-f60cf5e8fd1a"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scan_Shoe_BrownShoes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1acaf683-7e09-4042-8346-c9837bb519b3"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scan_Shoe_BrownTalon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b5ef1c0a-c6c3-4e11-8c7a-6ea6ba2c2a58"",
                    ""path"": ""<HID::DragonRise Inc.   Generic   USB  Joystick  >/button12"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31b178e8-f39d-438f-bb69-a302608ffc75"",
                    ""path"": ""<HID::DragonRise Inc.   Generic   USB  Joystick  >/button12"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bell1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MenuMap
        m_MenuMap = asset.FindActionMap("MenuMap", throwIfNotFound: true);
        m_MenuMap_Left = m_MenuMap.FindAction("Left", throwIfNotFound: true);
        m_MenuMap_Right = m_MenuMap.FindAction("Right", throwIfNotFound: true);
        m_MenuMap_Up = m_MenuMap.FindAction("Up", throwIfNotFound: true);
        m_MenuMap_Down = m_MenuMap.FindAction("Down", throwIfNotFound: true);
        m_MenuMap_Confirm = m_MenuMap.FindAction("Confirm", throwIfNotFound: true);
        m_MenuMap_Return = m_MenuMap.FindAction("Return", throwIfNotFound: true);
        // InGameMap
        m_InGameMap = asset.FindActionMap("InGameMap", throwIfNotFound: true);
        m_InGameMap_Coat = m_InGameMap.FindAction("Coat", throwIfNotFound: true);
        m_InGameMap_Coat1 = m_InGameMap.FindAction("Coat1", throwIfNotFound: true);
        m_InGameMap_Hat = m_InGameMap.FindAction("Hat", throwIfNotFound: true);
        m_InGameMap_Hat1 = m_InGameMap.FindAction("Hat1", throwIfNotFound: true);
        m_InGameMap_Reset = m_InGameMap.FindAction("Reset", throwIfNotFound: true);
        m_InGameMap_Shoe = m_InGameMap.FindAction("Shoe", throwIfNotFound: true);
        m_InGameMap_Shoe1 = m_InGameMap.FindAction("Shoe1", throwIfNotFound: true);
        m_InGameMap_Scan_Coat_BlackRed = m_InGameMap.FindAction("Scan_Coat_BlackRed", throwIfNotFound: true);
        m_InGameMap_Scan_Coat_Black = m_InGameMap.FindAction("Scan_Coat_Black", throwIfNotFound: true);
        m_InGameMap_Scan_Coat_Yellow = m_InGameMap.FindAction("Scan_Coat_Yellow", throwIfNotFound: true);
        m_InGameMap_Scan_Hat_Blue = m_InGameMap.FindAction("Scan_Hat_Blue", throwIfNotFound: true);
        m_InGameMap_Scan_Hat_Red = m_InGameMap.FindAction("Scan_Hat_Red", throwIfNotFound: true);
        m_InGameMap_Scan_Shoe_BrownShoes = m_InGameMap.FindAction("Scan_Shoe_BrownShoes", throwIfNotFound: true);
        m_InGameMap_Scan_Shoe_BrownTalon = m_InGameMap.FindAction("Scan_Shoe_BrownTalon", throwIfNotFound: true);
        m_InGameMap_Bell = m_InGameMap.FindAction("Bell", throwIfNotFound: true);
        m_InGameMap_Bell1 = m_InGameMap.FindAction("Bell1", throwIfNotFound: true);
    }

    ~@PlayerInputsMap()
    {
        UnityEngine.Debug.Assert(!m_MenuMap.enabled, "This will cause a leak and performance issues, PlayerInputsMap.MenuMap.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_InGameMap.enabled, "This will cause a leak and performance issues, PlayerInputsMap.InGameMap.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MenuMap
    private readonly InputActionMap m_MenuMap;
    private List<IMenuMapActions> m_MenuMapActionsCallbackInterfaces = new List<IMenuMapActions>();
    private readonly InputAction m_MenuMap_Left;
    private readonly InputAction m_MenuMap_Right;
    private readonly InputAction m_MenuMap_Up;
    private readonly InputAction m_MenuMap_Down;
    private readonly InputAction m_MenuMap_Confirm;
    private readonly InputAction m_MenuMap_Return;
    /// <summary>
    /// Provides access to input actions defined in input action map "MenuMap".
    /// </summary>
    public struct MenuMapActions
    {
        private @PlayerInputsMap m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public MenuMapActions(@PlayerInputsMap wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "MenuMap/Left".
        /// </summary>
        public InputAction @Left => m_Wrapper.m_MenuMap_Left;
        /// <summary>
        /// Provides access to the underlying input action "MenuMap/Right".
        /// </summary>
        public InputAction @Right => m_Wrapper.m_MenuMap_Right;
        /// <summary>
        /// Provides access to the underlying input action "MenuMap/Up".
        /// </summary>
        public InputAction @Up => m_Wrapper.m_MenuMap_Up;
        /// <summary>
        /// Provides access to the underlying input action "MenuMap/Down".
        /// </summary>
        public InputAction @Down => m_Wrapper.m_MenuMap_Down;
        /// <summary>
        /// Provides access to the underlying input action "MenuMap/Confirm".
        /// </summary>
        public InputAction @Confirm => m_Wrapper.m_MenuMap_Confirm;
        /// <summary>
        /// Provides access to the underlying input action "MenuMap/Return".
        /// </summary>
        public InputAction @Return => m_Wrapper.m_MenuMap_Return;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_MenuMap; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="MenuMapActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(MenuMapActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="MenuMapActions" />
        public void AddCallbacks(IMenuMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuMapActionsCallbackInterfaces.Add(instance);
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
            @Confirm.started += instance.OnConfirm;
            @Confirm.performed += instance.OnConfirm;
            @Confirm.canceled += instance.OnConfirm;
            @Return.started += instance.OnReturn;
            @Return.performed += instance.OnReturn;
            @Return.canceled += instance.OnReturn;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="MenuMapActions" />
        private void UnregisterCallbacks(IMenuMapActions instance)
        {
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
            @Confirm.started -= instance.OnConfirm;
            @Confirm.performed -= instance.OnConfirm;
            @Confirm.canceled -= instance.OnConfirm;
            @Return.started -= instance.OnReturn;
            @Return.performed -= instance.OnReturn;
            @Return.canceled -= instance.OnReturn;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="MenuMapActions.UnregisterCallbacks(IMenuMapActions)" />.
        /// </summary>
        /// <seealso cref="MenuMapActions.UnregisterCallbacks(IMenuMapActions)" />
        public void RemoveCallbacks(IMenuMapActions instance)
        {
            if (m_Wrapper.m_MenuMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="MenuMapActions.AddCallbacks(IMenuMapActions)" />
        /// <seealso cref="MenuMapActions.RemoveCallbacks(IMenuMapActions)" />
        /// <seealso cref="MenuMapActions.UnregisterCallbacks(IMenuMapActions)" />
        public void SetCallbacks(IMenuMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="MenuMapActions" /> instance referencing this action map.
    /// </summary>
    public MenuMapActions @MenuMap => new MenuMapActions(this);

    // InGameMap
    private readonly InputActionMap m_InGameMap;
    private List<IInGameMapActions> m_InGameMapActionsCallbackInterfaces = new List<IInGameMapActions>();
    private readonly InputAction m_InGameMap_Coat;
    private readonly InputAction m_InGameMap_Coat1;
    private readonly InputAction m_InGameMap_Hat;
    private readonly InputAction m_InGameMap_Hat1;
    private readonly InputAction m_InGameMap_Reset;
    private readonly InputAction m_InGameMap_Shoe;
    private readonly InputAction m_InGameMap_Shoe1;
    private readonly InputAction m_InGameMap_Scan_Coat_BlackRed;
    private readonly InputAction m_InGameMap_Scan_Coat_Black;
    private readonly InputAction m_InGameMap_Scan_Coat_Yellow;
    private readonly InputAction m_InGameMap_Scan_Hat_Blue;
    private readonly InputAction m_InGameMap_Scan_Hat_Red;
    private readonly InputAction m_InGameMap_Scan_Shoe_BrownShoes;
    private readonly InputAction m_InGameMap_Scan_Shoe_BrownTalon;
    private readonly InputAction m_InGameMap_Bell;
    private readonly InputAction m_InGameMap_Bell1;
    /// <summary>
    /// Provides access to input actions defined in input action map "InGameMap".
    /// </summary>
    public struct InGameMapActions
    {
        private @PlayerInputsMap m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public InGameMapActions(@PlayerInputsMap wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "InGameMap/Coat".
        /// </summary>
        public InputAction @Coat => m_Wrapper.m_InGameMap_Coat;
        /// <summary>
        /// Provides access to the underlying input action "InGameMap/Coat1".
        /// </summary>
        public InputAction @Coat1 => m_Wrapper.m_InGameMap_Coat1;
        /// <summary>
        /// Provides access to the underlying input action "InGameMap/Hat".
        /// </summary>
        public InputAction @Hat => m_Wrapper.m_InGameMap_Hat;
        /// <summary>
        /// Provides access to the underlying input action "InGameMap/Hat1".
        /// </summary>
        public InputAction @Hat1 => m_Wrapper.m_InGameMap_Hat1;
        /// <summary>
        /// Provides access to the underlying input action "InGameMap/Reset".
        /// </summary>
        public InputAction @Reset => m_Wrapper.m_InGameMap_Reset;
        /// <summary>
        /// Provides access to the underlying input action "InGameMap/Shoe".
        /// </summary>
        public InputAction @Shoe => m_Wrapper.m_InGameMap_Shoe;
        /// <summary>
        /// Provides access to the underlying input action "InGameMap/Shoe1".
        /// </summary>
        public InputAction @Shoe1 => m_Wrapper.m_InGameMap_Shoe1;
        /// <summary>
        /// Provides access to the underlying input action "InGameMap/Scan_Coat_BlackRed".
        /// </summary>
        public InputAction @Scan_Coat_BlackRed => m_Wrapper.m_InGameMap_Scan_Coat_BlackRed;
        /// <summary>
        /// Provides access to the underlying input action "InGameMap/Scan_Coat_Black".
        /// </summary>
        public InputAction @Scan_Coat_Black => m_Wrapper.m_InGameMap_Scan_Coat_Black;
        /// <summary>
        /// Provides access to the underlying input action "InGameMap/Scan_Coat_Yellow".
        /// </summary>
        public InputAction @Scan_Coat_Yellow => m_Wrapper.m_InGameMap_Scan_Coat_Yellow;
        /// <summary>
        /// Provides access to the underlying input action "InGameMap/Scan_Hat_Blue".
        /// </summary>
        public InputAction @Scan_Hat_Blue => m_Wrapper.m_InGameMap_Scan_Hat_Blue;
        /// <summary>
        /// Provides access to the underlying input action "InGameMap/Scan_Hat_Red".
        /// </summary>
        public InputAction @Scan_Hat_Red => m_Wrapper.m_InGameMap_Scan_Hat_Red;
        /// <summary>
        /// Provides access to the underlying input action "InGameMap/Scan_Shoe_BrownShoes".
        /// </summary>
        public InputAction @Scan_Shoe_BrownShoes => m_Wrapper.m_InGameMap_Scan_Shoe_BrownShoes;
        /// <summary>
        /// Provides access to the underlying input action "InGameMap/Scan_Shoe_BrownTalon".
        /// </summary>
        public InputAction @Scan_Shoe_BrownTalon => m_Wrapper.m_InGameMap_Scan_Shoe_BrownTalon;
        /// <summary>
        /// Provides access to the underlying input action "InGameMap/Bell".
        /// </summary>
        public InputAction @Bell => m_Wrapper.m_InGameMap_Bell;
        /// <summary>
        /// Provides access to the underlying input action "InGameMap/Bell1".
        /// </summary>
        public InputAction @Bell1 => m_Wrapper.m_InGameMap_Bell1;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_InGameMap; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="InGameMapActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(InGameMapActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="InGameMapActions" />
        public void AddCallbacks(IInGameMapActions instance)
        {
            if (instance == null || m_Wrapper.m_InGameMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InGameMapActionsCallbackInterfaces.Add(instance);
            @Coat.started += instance.OnCoat;
            @Coat.performed += instance.OnCoat;
            @Coat.canceled += instance.OnCoat;
            @Coat1.started += instance.OnCoat1;
            @Coat1.performed += instance.OnCoat1;
            @Coat1.canceled += instance.OnCoat1;
            @Hat.started += instance.OnHat;
            @Hat.performed += instance.OnHat;
            @Hat.canceled += instance.OnHat;
            @Hat1.started += instance.OnHat1;
            @Hat1.performed += instance.OnHat1;
            @Hat1.canceled += instance.OnHat1;
            @Reset.started += instance.OnReset;
            @Reset.performed += instance.OnReset;
            @Reset.canceled += instance.OnReset;
            @Shoe.started += instance.OnShoe;
            @Shoe.performed += instance.OnShoe;
            @Shoe.canceled += instance.OnShoe;
            @Shoe1.started += instance.OnShoe1;
            @Shoe1.performed += instance.OnShoe1;
            @Shoe1.canceled += instance.OnShoe1;
            @Scan_Coat_BlackRed.started += instance.OnScan_Coat_BlackRed;
            @Scan_Coat_BlackRed.performed += instance.OnScan_Coat_BlackRed;
            @Scan_Coat_BlackRed.canceled += instance.OnScan_Coat_BlackRed;
            @Scan_Coat_Black.started += instance.OnScan_Coat_Black;
            @Scan_Coat_Black.performed += instance.OnScan_Coat_Black;
            @Scan_Coat_Black.canceled += instance.OnScan_Coat_Black;
            @Scan_Coat_Yellow.started += instance.OnScan_Coat_Yellow;
            @Scan_Coat_Yellow.performed += instance.OnScan_Coat_Yellow;
            @Scan_Coat_Yellow.canceled += instance.OnScan_Coat_Yellow;
            @Scan_Hat_Blue.started += instance.OnScan_Hat_Blue;
            @Scan_Hat_Blue.performed += instance.OnScan_Hat_Blue;
            @Scan_Hat_Blue.canceled += instance.OnScan_Hat_Blue;
            @Scan_Hat_Red.started += instance.OnScan_Hat_Red;
            @Scan_Hat_Red.performed += instance.OnScan_Hat_Red;
            @Scan_Hat_Red.canceled += instance.OnScan_Hat_Red;
            @Scan_Shoe_BrownShoes.started += instance.OnScan_Shoe_BrownShoes;
            @Scan_Shoe_BrownShoes.performed += instance.OnScan_Shoe_BrownShoes;
            @Scan_Shoe_BrownShoes.canceled += instance.OnScan_Shoe_BrownShoes;
            @Scan_Shoe_BrownTalon.started += instance.OnScan_Shoe_BrownTalon;
            @Scan_Shoe_BrownTalon.performed += instance.OnScan_Shoe_BrownTalon;
            @Scan_Shoe_BrownTalon.canceled += instance.OnScan_Shoe_BrownTalon;
            @Bell.started += instance.OnBell;
            @Bell.performed += instance.OnBell;
            @Bell.canceled += instance.OnBell;
            @Bell1.started += instance.OnBell1;
            @Bell1.performed += instance.OnBell1;
            @Bell1.canceled += instance.OnBell1;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="InGameMapActions" />
        private void UnregisterCallbacks(IInGameMapActions instance)
        {
            @Coat.started -= instance.OnCoat;
            @Coat.performed -= instance.OnCoat;
            @Coat.canceled -= instance.OnCoat;
            @Coat1.started -= instance.OnCoat1;
            @Coat1.performed -= instance.OnCoat1;
            @Coat1.canceled -= instance.OnCoat1;
            @Hat.started -= instance.OnHat;
            @Hat.performed -= instance.OnHat;
            @Hat.canceled -= instance.OnHat;
            @Hat1.started -= instance.OnHat1;
            @Hat1.performed -= instance.OnHat1;
            @Hat1.canceled -= instance.OnHat1;
            @Reset.started -= instance.OnReset;
            @Reset.performed -= instance.OnReset;
            @Reset.canceled -= instance.OnReset;
            @Shoe.started -= instance.OnShoe;
            @Shoe.performed -= instance.OnShoe;
            @Shoe.canceled -= instance.OnShoe;
            @Shoe1.started -= instance.OnShoe1;
            @Shoe1.performed -= instance.OnShoe1;
            @Shoe1.canceled -= instance.OnShoe1;
            @Scan_Coat_BlackRed.started -= instance.OnScan_Coat_BlackRed;
            @Scan_Coat_BlackRed.performed -= instance.OnScan_Coat_BlackRed;
            @Scan_Coat_BlackRed.canceled -= instance.OnScan_Coat_BlackRed;
            @Scan_Coat_Black.started -= instance.OnScan_Coat_Black;
            @Scan_Coat_Black.performed -= instance.OnScan_Coat_Black;
            @Scan_Coat_Black.canceled -= instance.OnScan_Coat_Black;
            @Scan_Coat_Yellow.started -= instance.OnScan_Coat_Yellow;
            @Scan_Coat_Yellow.performed -= instance.OnScan_Coat_Yellow;
            @Scan_Coat_Yellow.canceled -= instance.OnScan_Coat_Yellow;
            @Scan_Hat_Blue.started -= instance.OnScan_Hat_Blue;
            @Scan_Hat_Blue.performed -= instance.OnScan_Hat_Blue;
            @Scan_Hat_Blue.canceled -= instance.OnScan_Hat_Blue;
            @Scan_Hat_Red.started -= instance.OnScan_Hat_Red;
            @Scan_Hat_Red.performed -= instance.OnScan_Hat_Red;
            @Scan_Hat_Red.canceled -= instance.OnScan_Hat_Red;
            @Scan_Shoe_BrownShoes.started -= instance.OnScan_Shoe_BrownShoes;
            @Scan_Shoe_BrownShoes.performed -= instance.OnScan_Shoe_BrownShoes;
            @Scan_Shoe_BrownShoes.canceled -= instance.OnScan_Shoe_BrownShoes;
            @Scan_Shoe_BrownTalon.started -= instance.OnScan_Shoe_BrownTalon;
            @Scan_Shoe_BrownTalon.performed -= instance.OnScan_Shoe_BrownTalon;
            @Scan_Shoe_BrownTalon.canceled -= instance.OnScan_Shoe_BrownTalon;
            @Bell.started -= instance.OnBell;
            @Bell.performed -= instance.OnBell;
            @Bell.canceled -= instance.OnBell;
            @Bell1.started -= instance.OnBell1;
            @Bell1.performed -= instance.OnBell1;
            @Bell1.canceled -= instance.OnBell1;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="InGameMapActions.UnregisterCallbacks(IInGameMapActions)" />.
        /// </summary>
        /// <seealso cref="InGameMapActions.UnregisterCallbacks(IInGameMapActions)" />
        public void RemoveCallbacks(IInGameMapActions instance)
        {
            if (m_Wrapper.m_InGameMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="InGameMapActions.AddCallbacks(IInGameMapActions)" />
        /// <seealso cref="InGameMapActions.RemoveCallbacks(IInGameMapActions)" />
        /// <seealso cref="InGameMapActions.UnregisterCallbacks(IInGameMapActions)" />
        public void SetCallbacks(IInGameMapActions instance)
        {
            foreach (var item in m_Wrapper.m_InGameMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InGameMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="InGameMapActions" /> instance referencing this action map.
    /// </summary>
    public InGameMapActions @InGameMap => new InGameMapActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "MenuMap" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="MenuMapActions.AddCallbacks(IMenuMapActions)" />
    /// <seealso cref="MenuMapActions.RemoveCallbacks(IMenuMapActions)" />
    public interface IMenuMapActions
    {
        /// <summary>
        /// Method invoked when associated input action "Left" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Right" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRight(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Up" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUp(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Down" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDown(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Confirm" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnConfirm(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Return" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnReturn(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "InGameMap" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="InGameMapActions.AddCallbacks(IInGameMapActions)" />
    /// <seealso cref="InGameMapActions.RemoveCallbacks(IInGameMapActions)" />
    public interface IInGameMapActions
    {
        /// <summary>
        /// Method invoked when associated input action "Coat" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCoat(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Coat1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCoat1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Hat" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHat(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Hat1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHat1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Reset" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnReset(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Shoe" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnShoe(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Shoe1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnShoe1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Scan_Coat_BlackRed" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnScan_Coat_BlackRed(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Scan_Coat_Black" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnScan_Coat_Black(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Scan_Coat_Yellow" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnScan_Coat_Yellow(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Scan_Hat_Blue" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnScan_Hat_Blue(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Scan_Hat_Red" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnScan_Hat_Red(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Scan_Shoe_BrownShoes" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnScan_Shoe_BrownShoes(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Scan_Shoe_BrownTalon" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnScan_Shoe_BrownTalon(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Bell" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnBell(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Bell1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnBell1(InputAction.CallbackContext context);
    }
}
